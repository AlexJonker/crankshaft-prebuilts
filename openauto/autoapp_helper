#!/bin/bash

source /opt/crankshaft/crankshaft_default_env.sh
source /opt/crankshaft/crankshaft_system_env.sh
source /boot/crankshaft/crankshaft_env.sh

echo "$@" >> /tmp/autoapp_helper_command

if [ -z $1 ]; then
    echo "got no params" >> /tmp/autoapp_helper_command
    exit 0
fi

IFS="#" read -r -a array <<< "$@"

# set params to system
if [ "${array[0]}" == "setparams" ]; then

    # Start
    echo "-------------------------------------" >> /tmp/autoapp_helper_command
    echo "configure start" >> /tmp/autoapp_helper_command
    sudo touch /tmp/config_in_progress


    # set disconnect timeout
    echo "${array[3]}" >> /tmp/autoapp_helper_command
    crankshaft timers disconnect set ${array[3]}

    # set shutdown timeout
    echo "${array[4]}" >> /tmp/autoapp_helper_command
    crankshaft timers shutdown set ${array[4]}

    # set day / night
    echo "${array[5]}" >> /tmp/autoapp_helper_command
    echo "${array[6]}" >> /tmp/autoapp_helper_command
    crankshaft timers daynight ${array[5]} ${array[6]}

    # set general gpio usage # dev mode gpio # invert gpio # x11 gpio # rearcam gpio # android gpio # enable x11 mode # enable flip mode
    echo "${array[7]}" >> /tmp/autoapp_helper_command
    echo "${array[8]}" >> /tmp/autoapp_helper_command
    echo "${array[9]}" >> /tmp/autoapp_helper_command
    echo "${array[10]}" >> /tmp/autoapp_helper_command
    echo "${array[11]}" >> /tmp/autoapp_helper_command
    echo "${array[12]}" >> /tmp/autoapp_helper_command
    echo "${array[13]}" >> /tmp/autoapp_helper_command
    echo "${array[14]}" >> /tmp/autoapp_helper_command

    # open filesystems
    crankshaft filesystem boot unlock
    crankshaft filesystem system unlock
    sudo sed -i 's/^ENABLE_GPIO=.*/ENABLE_GPIO='$(echo ${array[7]} | sed 's/- - -/0/')'/' /boot/crankshaft/crankshaft_env.sh
    sudo sed -i 's/^DEV_PIN=.*/DEV_PIN='$(echo ${array[8]} | sed 's/- - -/0/')'/' /boot/crankshaft/crankshaft_env.sh
    sudo sed -i 's/^INVERT_PIN=.*/INVERT_PIN='$(echo ${array[9]} | sed 's/- - -/0/')'/' /boot/crankshaft/crankshaft_env.sh
    sudo sed -i 's/^X11_PIN=.*/X11_PIN='$(echo ${array[10]} | sed 's/- - -/0/')'/' /boot/crankshaft/crankshaft_env.sh
    sudo sed -i 's/^REARCAM_PIN=.*/REARCAM_PIN='$(echo ${array[11]} | sed 's/- - -/0/')'/' /boot/crankshaft/crankshaft_env.sh
    sudo sed -i 's/^ANDROID_PIN=.*/ANDROID_PIN='$(echo ${array[12]} | sed 's/- - -/0/')'/' /boot/crankshaft/crankshaft_env.sh
    sudo sed -i 's/^START_X11=.*/START_X11='$(echo ${array[13]})'/' /boot/crankshaft/crankshaft_env.sh
    sudo sed -i 's/^FLIP_SCREEN=.*/FLIP_SCREEN='$(echo ${array[14]})'/' /boot/crankshaft/crankshaft_env.sh

    # set debug mode
    echo "${array[22]}" >> /tmp/autoapp_helper_command
    sudo sed -i 's/^DEBUG_MODE=.*/DEBUG_MODE='$(echo ${array[22]})'/' /boot/crankshaft/crankshaft_env.sh

    # ignition values
    echo "${array[23]}" >> /tmp/autoapp_helper_command
    echo "${array[24]}" >> /tmp/autoapp_helper_command
    sudo sed -i 's/^IGNITION_PIN=.*/IGNITION_PIN='$(echo ${array[23]} | sed 's/- - -/0/')'/' /boot/crankshaft/crankshaft_env.sh
    sudo sed -i 's/^IGNITION_DELAY=.*/IGNITION_DELAY='$(echo ${array[24]})'/' /boot/crankshaft/crankshaft_env.sh

    # wifi credentials
    echo "${array[25]}" >> /tmp/autoapp_helper_command
    echo "${array[26]}" >> /tmp/autoapp_helper_command
    echo "${array[27]}" >> /tmp/autoapp_helper_command
    echo "${array[28]}" >> /tmp/autoapp_helper_command
    sudo sed -i 's/^WIFI_SSID=.*/WIFI_SSID='$(echo ${array[25]})'/' /boot/crankshaft/crankshaft_env.sh
    sudo sed -i 's/^WIFI_PSK=.*/WIFI_PSK='$(echo ${array[26]})'/' /boot/crankshaft/crankshaft_env.sh
    sudo sed -i 's/^ENABLE_HOTSPOT=.*/ENABLE_HOTSPOT='$(echo ${array[27]})'/' /boot/crankshaft/crankshaft_env.sh
    sudo sed -i 's/^HOTSPOT_PSK=.*/HOTSPOT_PSK='$(echo ${array[28]})'/' /boot/crankshaft/crankshaft_env.sh

    # set audio output device
    echo "${array[15]}" >> /tmp/autoapp_helper_command
    # only change client.conf if device is not dummy output
    if [ "${array[15]}" != "No audio output hardware detected!" ]; then
        card=$(echo ${array[15]} | cut -d- -f1 | cut -d"|" -f1 | sed 's/^ //' | sed 's/ *$//')
        device=$(echo ${array[15]} | cut -d- -f1 | cut -d"|" -f2 | sed 's/^ //' | sed 's/ *$//')
        desc=$(echo ${array[15]} | cut -d- -f2- | sed 's/^ //' | sed 's/ *$//')
        echo "Request: >${array[15]}<" > /tmp/set_soundcard
        echo "Card: >$card<" >> /tmp/set_soundcard
        echo "Device: >$device<" >> /tmp/set_soundcard
        echo "Desc: >$desc<" >> /tmp/set_soundcard
        pulsedevice=$(pactl list sinks | grep -B25 -e 'alsa.card = "'$card'"' | grep -B24 -e 'alsa.device = "'$device'"' | grep -A0 'Name: ' | grep -v '.default' | sed 's/--//' | sed 's/Name: //' | tail -n1 | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
        pulseid=$(pactl list sinks short | grep $pulsedevice | awk {'print $1'} | sed 's/\t//g')
        echo "Pulse: >$pulsedevice<" >> /tmp/set_soundcard
        echo "Pulse ID: >$pulseid<" >> /tmp/set_soundcard
        if [ ! -z $pulsedevice ]; then
                sudo sed -i 's/.*default-sink.*//' /etc/pulse/client.conf
                sudo sed -i 's/^# Crankshaft selected output device.*//' /etc/pulse/client.conf
                sudo sed -i 's/^# no output selected -> default.*//' /etc/pulse/client.conf
                sudo sed -i '/./,/^$/!d' /etc/pulse/client.conf
                sudo sh -c 'echo "# Crankshaft selected output device" >> /etc/pulse/client.conf'
                sudo sh -c 'echo "default-sink = '$(echo $pulsedevice)'" >> /etc/pulse/client.conf'
        else
                sudo sed -i 's/.*default-sink.*//' /etc/pulse/client.conf
                sudo sed -i 's/^# Crankshaft selected output device.*//' /etc/pulse/client.conf
                sudo sed -i 's/^# no output selected -> default.*//' /etc/pulse/client.conf
                sudo sed -i '/./,/^$/!d' /etc/pulse/client.conf
                sudo sh -c 'echo "# Crankshaft selected output device" >> /etc/pulse/client.conf'
                sudo sh -c 'echo "# no output selected -> default" >> /etc/pulse/client.conf'
        fi
    fi

    # set audio input device
    echo "${array[16]}" >> /tmp/autoapp_helper_command
    # only change client.conf if device is not dummy output
    if [ "${array[16]}" != "No audio input hardware detected!" ]; then
        card=$(echo ${array[16]} | cut -d- -f1 | cut -d"|" -f1 | sed 's/^ //' | sed 's/ *$//')
        device=$(echo ${array[16]} | cut -d- -f1 | cut -d"|" -f2 | sed 's/^ //' | sed 's/ *$//')
        desc=$(echo ${array[16]} | cut -d- -f2- | sed 's/^ //' | sed 's/ *$//')
        echo "Request: >${array[16]}<" > /tmp/set_mic
        echo "Card: >$card<" >> /tmp/set_mic
        echo "Device: >$device<" >> /tmp/set_mic
        echo "Desc: >$desc<" >> /tmp/set_mic
        pulsedevice=$(pactl list sources | grep -B25 -e 'alsa.card = "'$card'"' | grep -B24 -e 'alsa.device = "'$device'"' | grep -A0 'Name: ' | grep -v '.default' | sed 's/--//' | sed 's/Name: //' | tail -n1 | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
        pulseid=$(pactl list sources short | grep $pulsedevice | awk {'print $1'} | sed 's/\t//g')
        echo "Pulse: >$pulsedevice<" >> /tmp/set_mic
        echo "Pulse ID: >$pulseid<" >> /tmp/set_mic
        if [ ! -z $pulsedevice ]; then
                sudo sed -i 's/.*default-source.*//' /etc/pulse/client.conf
                sudo sed -i 's/^# Crankshaft selected input device.*//' /etc/pulse/client.conf
                sudo sed -i 's/^# no input selected -> default.*//' /etc/pulse/client.conf
                sudo sed -i '/./,/^$/!d' /etc/pulse/client.conf
                sudo sh -c 'echo "# Crankshaft selected input device" >> /etc/pulse/client.conf'
                sudo sh -c 'echo "default-source = '$(echo $pulsedevice)'" >> /etc/pulse/client.conf'
        else
                sudo sed -i 's/.*default-source.*//' /etc/pulse/client.conf
                sudo sed -i 's/^# Crankshaft selected input device.*//' /etc/pulse/client.conf
                sudo sed -i 's/^# no input selected -> default.*//' /etc/pulse/client.conf
                sudo sed -i '/./,/^$/!d' /etc/pulse/client.conf
                sudo sh -c 'echo "# Crankshaft selected input device" >> /etc/pulse/client.conf'
                sudo sh -c 'echo "# no input selected -> default" >> /etc/pulse/client.conf'
        fi
    fi
    # set playback volume
    echo "${array[1]}" >> /tmp/autoapp_helper_command
    pulsedeviceplay=$(cat /etc/pulse/client.conf | grep 'default-sink =' | cut -d= -f2 | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
    # unmute
    pactl set-sink-mute $pulsedeviceplay 0
    # set volume
    if [[ ${array[1]} = *[[:digit:]]* ]]; then
        pactl set-sink-volume $pulsedeviceplay ${array[1]}%
    else
        pactl set-sink-volume $pulsedeviceplay 50%
    fi

    # set capture volume
    echo "${array[2]}" >> /tmp/autoapp_helper_command
    pulsedevicecap=$(cat /etc/pulse/client.conf | grep 'default-source =' | cut -d= -f2 | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
    # unmute
    pactl set-source-mute $pulsedevicecap 0
    # set volume
    if [[ ${array[2]} = *[[:digit:]]* ]]; then
        pactl set-source-volume $pulsedevicecap ${array[2]}%
    else
        pactl set-source-volume $pulsedevicecap 50%
    fi

    # writee volumes to boot
    sudo sh -c 'echo "'${array[1]}'" > /boot/crankshaft/volume'
    sudo sh -c 'echo "'${array[2]}'" > /boot/crankshaft/capvolume'

    # rtc setup
    if [ ${array[29]} == "1" ]; then
        echo "${array[17]}" >> /tmp/autoapp_helper_command
        echo "${array[18]}" >> /tmp/autoapp_helper_command
        if [ "${array[17]}" == "none" ]; then
            /usr/local/bin/crankshaft rtc disable
        else
            /usr/local/bin/crankshaft rtc ${array[17]} ${array[18]}
        fi
    fi

    # dac setup
    if [ ${array[29]} == "1" ]; then
        echo "${array[19]}" >> /tmp/autoapp_helper_command
        if [ "${array[19]}" == "Custom" ]; then
            /usr/local/bin/crankshaft audio clean
        fi
        if [ "${array[19]}" == "Allo - Boss" ]; then
            /usr/local/bin/crankshaft audio allo boss
        fi
        if [ "${array[19]}" == "Allo - Piano" ]; then
            /usr/local/bin/crankshaft audio allo piano
        fi
        if [ "${array[19]}" == "Audioinjector - Zero" ]; then
            /usr/local/bin/crankshaft audio audioinjector zero
        fi
        if [ "${array[19]}" == "Audioinjector - Stereo" ]; then
            /usr/local/bin/crankshaft audio audioinjector stereo
        fi
        if [ "${array[19]}" == "Hifiberry - DAC" ]; then
            /usr/local/bin/crankshaft audio hifiberry dac
        fi
        if [ "${array[19]}" == "Hifiberry - DAC Plus" ]; then
            /usr/local/bin/crankshaft audio hifiberry dacplus
        fi
        if [ "${array[19]}" == "Hifiberry - DAC Digi" ]; then
            /usr/local/bin/crankshaft audio hifiberry digi
        fi
        if [ "${array[19]}" == "Hifiberry - DAC Amp" ]; then
            /usr/local/bin/crankshaft audio hifiberry amp
        fi
        if [ "${array[19]}" == "IQaudIO - Pi-DAC Plus/Pro/Zero" ]; then
            /usr/local/bin/crankshaft audio iqaudio dacplus
        fi
        if [ "${array[19]}" == "IQaudIO - Pi-Digi Amp Plus" ]; then
            /usr/local/bin/crankshaft audio iqaudio digiampplus
        fi
        if [ "${array[19]}" == "IQaudIO - Pi-Digi Amp Plus - Automute" ]; then
            /usr/local/bin/crankshaft audio iqaudio digiampplusauto
        fi
        if [ "${array[19]}" == "IQaudIO - Pi-Digi Plus" ]; then
            /usr/local/bin/crankshaft audio iqaudio digiplus
        fi
        if [ "${array[19]}" == "Raspberry Pi - Onboard" ]; then
            /usr/local/bin/crankshaft audio rpi
        fi
    fi

    # Enable/Disable Timers
    echo "${array[20]}" >> /tmp/autoapp_helper_command
    if [ "${array[20]}" == "1" ]; then
        crankshaft timers shutdown disable
    else
        crankshaft timers shutdown enable
        if [ ! -f /tmp/dev_mode_enabled ]; then
            crankshaft timers shutdown start
        else
            crankshaft timers shutdown stop
        fi
    fi

    echo "${array[21]}" >> /tmp/autoapp_helper_command
    if [ "${array[21]}" == "1" ]; then
        crankshaft timers disconnect disable
    else
        crankshaft timers disconnect enable
        if [ ! -f /tmp/dev_mode_enabled ]; then
            crankshaft timers disconnect start
        else
            crankshaft timers disconnect stop
        fi
    fi
    # clean buffers
    sync

    # close filesystems
    crankshaft filesystem boot lock
    crankshaft filesystem system lock

    # Done
    echo "configure done" >> /tmp/autoapp_helper_command
    echo "-------------------------------------" >> /tmp/autoapp_helper_command
    sudo rm /tmp/config_in_progress
fi

# get params from system

if [ "$1" == "getparams" ]; then

    # Start
    echo "-------------------------------------" >> /tmp/autoapp_helper_command
    echo "get system values start" >> /tmp/autoapp_helper_command

    # get master volume
    pulsedeviceplay=$(cat /etc/pulse/client.conf | grep 'default-sink =' | cut -d= -f2 | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
    levelplay=$(pactl list sinks | grep -A8 $pulsedeviceplay | grep Volume | cut -d/ -f2 | sed 's/%//' | sed 's/ //g')

    # get capture volume
    pulsedevicecap=$(cat /etc/pulse/client.conf | grep 'default-source =' | cut -d= -f2 | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
    levelcap=$(pactl list sources | grep -A8 $pulsedevicecap | grep Volume | cut -d/ -f2 | sed 's/%//' | sed 's/ //g')

    # get disconnect timeout
    remainingdisconnect=$(systemctl list-timers disconnect.timer | grep left | cut -dl -f1  | awk {'print $5 $6'})
    textdisconnect="Stopped"
    if [ ! -z $remainingdisconnect ]; then
        textdisconnect="$remainingdisconnect left"
    fi

    # get shutdown timeout
    remainingshutdown=$(systemctl list-timers shutdown.timer | grep left | cut -dl -f1  | awk {'print $5 $6'})
    textshutdown="Stopped"
    if [ ! -z $remainingshutdown ]; then
        textshutdown="$remainingshutdown left"
    fi

    # free mem
    mem=$(free -h | grep Mem | awk {'print $4'})

    # cpu freq
    typeset -i freq
    freq=$(sudo cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freq)/1000

    # cpu temp
    temp=$(/opt/vc/bin/vcgencmd measure_temp | cut -d= -f2)

    # get outputs
    sudo rm /tmp/get_outputs > /dev/null 2>&1
    # check for pulseaudio dummy output
    nodevice=$(pactl list sinks | grep 'Description: Dummy Output' | sed 's/"//g' | sed 's/\t//g' | sed 's/ //g' | sed 's/://g' | tail -n1)
    if [ -z $nodevice ]; then
        pactl list sinks | grep -A26 'Sink #' | grep 'alsa.id =' | sed 's/\t//g' | sed 's/alsa.id =//' | sed 's/^ //' | sed 's/ *$//' | sed 's/"//g' | while read -r line; do
            card=$(pacmd list-sinks | grep -A34 "$line" | grep -B4 'alsa.card =' | sed 's/\t//g' | grep 'alsa.card =' | cut -d= -f2 | sed 's/"//g' | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
            device=$(pacmd list-sinks | grep -A34 "$line" | grep -B4 'alsa.card =' | sed 's/\t//g' | grep 'alsa.device =' | cut -d= -f2 | sed 's/"//g' | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
            desc=$(pacmd list-sinks | grep -A34 "$line" | grep -B4 'alsa.card =' | sed 's/\t//g' | grep 'alsa.id =' | cut -d= -f2 | sed 's/"//g' | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
            desc2=$(pacmd list-sinks | grep -A35 "$line" | grep -B4 'alsa.card_name =' | sed 's/\t//g' | grep 'alsa.card_name =' | cut -d= -f2 | sed 's/"//g' | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
            echo "$card|$device - $desc [$desc2]" >> /tmp/get_outputs
        done

        # default output
        sudo rm /tmp/get_default_output > /dev/null 2>&1
        pulsedeviceplay=$(cat /etc/pulse/client.conf | grep 'default-sink =' | cut -d= -f2 | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
        if [ ! -z $pulsedeviceplay ]; then
            defaultoutput=$(pactl list sinks short | awk {'print $1" "$2'} | grep $pulsedeviceplay | awk {'print $2'})
            if [ ! -z $defaultoutput ]; then
                card=$(pacmd list-sinks | grep -A34 $defaultoutput | grep -B4 'alsa.card =' | sed 's/\t//g' | grep 'alsa.card =' | cut -d= -f2 | sed 's/"//g' | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
                device=$(pacmd list-sinks | grep -A34 $defaultoutput | grep -B4 'alsa.card =' | sed 's/\t//g' | grep 'alsa.device =' | cut -d= -f2 | sed 's/"//g' | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
                desc=$(pacmd list-sinks | grep -A34 $defaultoutput | grep -B4 'alsa.card =' | sed 's/\t//g' | grep 'alsa.id =' | cut -d= -f2 | sed 's/"//g' | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
                desc2=$(pacmd list-sinks | grep -A35 $defaultoutput | grep -B4 'alsa.card_name =' | sed 's/\t//g' | grep 'alsa.card_name =' | cut -d= -f2 | sed 's/"//g' | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
                echo "$card|$device - $desc [$desc2]" > /tmp/get_default_output
            else
                echo "not selected" > /tmp/get_default_output
                cp /tmp/get_outputs /tmp/get_outputs.tmp
                echo "not selected" > /tmp/get_outputs
                cat /tmp/get_outputs.tmp >> /tmp/get_outputs
                sudo rm -f /tmp/get_outputs.tmp
            fi
        fi
    else
        echo "No audio output hardware detected!" > /tmp/get_outputs
        echo "No audio output hardware detected!" > /tmp/get_default_output
    fi


    # get inputs
    sudo rm /tmp/get_inputs > /dev/null 2>&1
    # check in put device available
    nodevice=$(arecord -l | sed 's/"//g' | sed 's/\t//g' | sed 's/ //g' | sed 's/://g' | tail -n1)
    if [ ! -z $nodevice ]; then
        arecord -l | grep card | while read -r line; do
            card=$(echo $line | cut -d":" -f1 | cut -d" " -f2)
            device=$(echo $line | cut -d":" -f2 | cut -d"," -f2 | sed 's/^ //g' | cut -d" " -f2)
            desc="$(echo $line | cut -d: -f3 | cut -d[ -f1 | sed 's/^ //g' | sed 's/ *$//') [$(echo $line | cut -d: -f2 | cut -d] -f1 | cut -d[ -f2)]"
            echo "$card|$device - $desc" >> /tmp/get_inputs
        done
        # default input
        sudo rm /tmp/get_default_input > /dev/null 2>&1
        pulsedevicecap=$(cat /etc/pulse/client.conf | grep 'default-source =' | cut -d= -f2 | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
        if [ ! -z $pulsedevicecap ]; then
            defaultinput=$(pactl list sources short | awk {'print $1" "$2'} | grep $pulsedevicecap | awk {'print $2'})
            if [ ! -z $defaultinput ]; then
                card=$(pacmd list-sources | grep -A34 $defaultinput | grep -B4 'alsa.card =' | sed 's/\t//g' | grep 'alsa.card =' | cut -d= -f2 | sed 's/"//g' | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
                device=$(pacmd list-sources | grep -A34 $defaultinput | grep -B4 'alsa.card =' | sed 's/\t//g' | grep 'alsa.device =' | cut -d= -f2 | sed 's/"//g' | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
                desc=$(pacmd list-sources | grep -A34 $defaultinput | grep -B4 'alsa.card =' | sed 's/\t//g' | grep 'alsa.id =' | cut -d= -f2 | sed 's/"//g' | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
                desc2=$(pacmd list-sources | grep -A34 $defaultinput | grep -B4 'alsa.card_name =' | sed 's/\t//g' | grep 'alsa.card_name =' | cut -d= -f2 | sed 's/"//g' | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
                echo "$card|$device - $desc [$desc2]" > /tmp/get_default_input
            else
                echo "not selected" > /tmp/get_default_input
                cp /tmp/get_inputs /tmp/get_inputs.tmp
                echo "not selected" > /tmp/get_inputs
                cat /tmp/get_inputs.tmp >> /tmp/get_inputs
                sudo rm -f /tmp/get_inputs.tmp
            fi
        fi
    else
        echo "No audio input hardware detected!" > /tmp/get_inputs
        echo "No audio input hardware detected!" > /tmp/get_default_inputs
    fi

    # versiontring
    versionstring=$(cat /etc/crankshaft.build)

    # datestring
    datestring=$(cat /etc/crankshaft.date)

    # create tz listing
    cat /usr/share/zoneinfo/zone1970.tab | grep / | awk {'print $3'} | sort > /tmp/timezone_listing

    # get current timezone
    timezone=$(cat /etc/timezone)

    # get current rtc of present
    rtc=$(cat /boot/config.txt | grep dtoverlay=i2c-rtc | cut -d, -f2)

    # get current dac
    dac=$(cat /boot/config.txt | grep -e 'dtoverlay=allo' -e 'dtoverlay=hifiberry' -e 'dtoverlay=audioinjector' -e 'dtoverlay=iqaudio' | cut -d= -f2 | sed 's/dtoverlay=//')
    # check for onboard if no dac
    if [ -z $dac ]; then
        dac=$(cat /boot/config.txt | grep -e 'dtparam=audio=on' | cut -d= -f2 | sed 's/dtoverlay=//')
    fi

    custombrightness=0
    if [ ! -z ${CUSTOM_BRIGHTNESS_COMMAND} ]; then
        custombrightness=${CUSTOM_BRIGHTNESS_COMMAND}
    fi

    hotspot_ssid=$(cat /etc/hostapd/hostapd.conf | grep '^ssid=' | cut -d= -f2)

    # create return value string
    sudo rm /tmp/return_value > /dev/null 2>&1
    echo "${versionstring}#${datestring}#${levelplay}#${levelcap}#${textshutdown}#${DISCONNECTION_POWEROFF_MINS}#${textdisconnect}#${DISCONNECTION_SCREEN_POWEROFF_SECS}#${RTC_DAY_START}#${RTC_NIGHT_START}#${ENABLE_GPIO}#${DEV_PIN}#${INVERT_PIN}#${X11_PIN}#${REARCAM_PIN}#${ANDROID_PIN}#${START_X11}#${FLIP_SCREEN}#${mem}#${freq}#${temp}#${rtc}#${timezone}#${dac}#${DISCONNECTION_POWEROFF_DISABLE}#${DISCONNECTION_SCREEN_POWEROFF_DISABLE}#$custombrightness#${DEBUG_MODE}#${IGNITION_PIN}#${IGNITION_DELAY}#${WIFI_SSID}#${WIFI_PSK}#${ENABLE_HOTSPOT}#${hotspot_ssid}#${HOTSPOT_PSK}#" > /tmp/return_value
    echo "get system values done" >> /tmp/autoapp_helper_command
    echo "-------------------------------------" >> /tmp/autoapp_helper_command
fi

if [ "$1" == "restorevolumes" ]; then
    # set playback volume
    pulsedeviceplay=$(cat /etc/pulse/client.conf | grep 'default-sink =' | cut -d= -f2 | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
    if [ ! -z $pulsedeviceplay ]; then
        # unmute
        pactl set-sink-mute $pulsedeviceplay 0
        # set volume
        if [ -f /boot/crankshaft/volume ]; then
            volume=$(cat /boot/crankshaft/volume)
            # check min volume
            if [ $volume -lt ${STARTUP_VOL_MIN} ];then
                volume=${STARTUP_VOL_MIN}
            fi
            # check max volume
            if [ $volume -gt ${STARTUP_VOL_MAX} ];then
                volume=${STARTUP_VOL_MAX}
            fi
            pactl set-sink-volume $pulsedeviceplay $volume%
        else
            pactl set-sink-volume $pulsedeviceplay 50%
        fi
    fi

    # set capture volume
    pulsedevicecap=$(cat /etc/pulse/client.conf | grep 'default-source =' | cut -d= -f2 | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
    if [ ! -z $pulsedevicecap ]; then
        # unmute
        pactl set-source-mute $pulsedevicecap 0
        # set volume
        if [ -f /boot/crankshaft/capvolume ]; then
            capvolume=$(cat /boot/crankshaft/capvolume)
            # check min volume
            if [ $capvolume -lt ${STARTUP_VOL_MIN} ];then
                capvolume=${STARTUP_VOL_MIN}
            fi
            # check max volume
            if [ $capvolume -gt ${STARTUP_VOL_MAX} ];then
                capvolume=${STARTUP_VOL_MAX}
            fi
            pactl set-source-volume $pulsedevicecap $capvolume%
        else
            pactl set-source-volume $pulsedevicecap 50%
        fi
    fi
fi

if [ "$1" == "custombrightness" ]; then
    if [ ! -z ${CUSTOM_BRIGHTNESS_COMMAND} ]; then
        ${CUSTOM_BRIGHTNESS_COMMAND} $(cat /tmp/custombrightness) &
    fi
fi

if [ "$1" == "startkodimonitor" ]; then
    sudo systemctl start kodimonitor
fi

exit 0
